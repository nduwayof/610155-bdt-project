package com.twitter.producer.service;import com.twitter.producer.config.KafkaProducer;import com.twitter.producer.config.KafkaProperties;import com.twitter.producer.service.utils.TwitterStringsUtils;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.social.twitter.api.*;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;import java.util.Set;/** * The type Twitter streaming service. * * @author fabrice */@Slf4j@Service@RequiredArgsConstructorpublic class TwitterStreamingService {    private final Twitter twitter;    private final KafkaProperties kafkaProperties;    private final KafkaProducer kafkaProducerService;    /**     * Stream.     */    public void stream() {        List<StreamListener> listeners = new ArrayList<>();        StreamListener streamListener = new StreamListener() {            @Override            public void onTweet(Tweet tweet) {                String tweetLanguageCode = tweet.getLanguageCode();                String tweetText = tweet.getText();                if (!"en".equals(tweetLanguageCode)) {                    return;                }                Set<String> hashTags = TwitterStringsUtils.tweetToHashTags(tweetText);                if (hashTags.isEmpty()) {                    return;                }                log.info("User '{}', Tweeted : {}, from ; {}", tweet.getUser().getName(), tweet.getText(), tweet.getUser().getLocation());                kafkaProducerService.send(kafkaProperties.getTemplate().getDefaultTopic(), tweet.getText());            }            @Override            public void onDelete(StreamDeleteEvent streamDeleteEvent) {            }            @Override            public void onLimit(int i) {            }            @Override            public void onWarning(StreamWarningEvent streamWarningEvent) {            }        };        listeners.add(streamListener);        twitter.streamingOperations().sample(listeners);    }}